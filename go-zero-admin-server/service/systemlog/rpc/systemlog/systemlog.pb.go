// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: systemlog.proto

package systemlog

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EmptyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyReq) Reset() {
	*x = EmptyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_systemlog_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyReq) ProtoMessage() {}

func (x *EmptyReq) ProtoReflect() protoreflect.Message {
	mi := &file_systemlog_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyReq.ProtoReflect.Descriptor instead.
func (*EmptyReq) Descriptor() ([]byte, []int) {
	return file_systemlog_proto_rawDescGZIP(), []int{0}
}

type LoginLogsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page     int64  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Limit    int64  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Username string `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *LoginLogsReq) Reset() {
	*x = LoginLogsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_systemlog_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginLogsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginLogsReq) ProtoMessage() {}

func (x *LoginLogsReq) ProtoReflect() protoreflect.Message {
	mi := &file_systemlog_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginLogsReq.ProtoReflect.Descriptor instead.
func (*LoginLogsReq) Descriptor() ([]byte, []int) {
	return file_systemlog_proto_rawDescGZIP(), []int{1}
}

func (x *LoginLogsReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *LoginLogsReq) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *LoginLogsReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type LoginLogAddReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Info     string `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *LoginLogAddReq) Reset() {
	*x = LoginLogAddReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_systemlog_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginLogAddReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginLogAddReq) ProtoMessage() {}

func (x *LoginLogAddReq) ProtoReflect() protoreflect.Message {
	mi := &file_systemlog_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginLogAddReq.ProtoReflect.Descriptor instead.
func (*LoginLogAddReq) Descriptor() ([]byte, []int) {
	return file_systemlog_proto_rawDescGZIP(), []int{2}
}

func (x *LoginLogAddReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *LoginLogAddReq) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

type LoginLogInfoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Info     string `protobuf:"bytes,3,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *LoginLogInfoReply) Reset() {
	*x = LoginLogInfoReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_systemlog_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginLogInfoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginLogInfoReply) ProtoMessage() {}

func (x *LoginLogInfoReply) ProtoReflect() protoreflect.Message {
	mi := &file_systemlog_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginLogInfoReply.ProtoReflect.Descriptor instead.
func (*LoginLogInfoReply) Descriptor() ([]byte, []int) {
	return file_systemlog_proto_rawDescGZIP(), []int{3}
}

func (x *LoginLogInfoReply) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LoginLogInfoReply) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *LoginLogInfoReply) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

type LoginLogsInfoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total         int64                `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	LoginLogsInfo []*LoginLogInfoReply `protobuf:"bytes,2,rep,name=loginLogsInfo,proto3" json:"loginLogsInfo,omitempty"`
}

func (x *LoginLogsInfoReply) Reset() {
	*x = LoginLogsInfoReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_systemlog_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginLogsInfoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginLogsInfoReply) ProtoMessage() {}

func (x *LoginLogsInfoReply) ProtoReflect() protoreflect.Message {
	mi := &file_systemlog_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginLogsInfoReply.ProtoReflect.Descriptor instead.
func (*LoginLogsInfoReply) Descriptor() ([]byte, []int) {
	return file_systemlog_proto_rawDescGZIP(), []int{4}
}

func (x *LoginLogsInfoReply) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *LoginLogsInfoReply) GetLoginLogsInfo() []*LoginLogInfoReply {
	if x != nil {
		return x.LoginLogsInfo
	}
	return nil
}

type IsSuccessReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsSuccess bool `protobuf:"varint,1,opt,name=isSuccess,proto3" json:"isSuccess,omitempty"`
}

func (x *IsSuccessReply) Reset() {
	*x = IsSuccessReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_systemlog_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsSuccessReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsSuccessReply) ProtoMessage() {}

func (x *IsSuccessReply) ProtoReflect() protoreflect.Message {
	mi := &file_systemlog_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsSuccessReply.ProtoReflect.Descriptor instead.
func (*IsSuccessReply) Descriptor() ([]byte, []int) {
	return file_systemlog_proto_rawDescGZIP(), []int{5}
}

func (x *IsSuccessReply) GetIsSuccess() bool {
	if x != nil {
		return x.IsSuccess
	}
	return false
}

var File_systemlog_proto protoreflect.FileDescriptor

var file_systemlog_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x09, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x6c, 0x6f, 0x67, 0x22, 0x0a, 0x0a, 0x08,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x22, 0x54, 0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x40,
	0x0a, 0x0e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f,
	0x22, 0x53, 0x0a, 0x11, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x6e, 0x0a, 0x12, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4c, 0x6f,
	0x67, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x42, 0x0a, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x6c, 0x6f, 0x67, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x4c, 0x6f, 0x67,
	0x73, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x2e, 0x0a, 0x0e, 0x69, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x32, 0xd7, 0x01, 0x0a, 0x09, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x6c, 0x6f, 0x67, 0x12, 0x46, 0x0a, 0x0c, 0x67, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4c,
	0x6f, 0x67, 0x73, 0x12, 0x17, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x6c, 0x6f, 0x67, 0x2e,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x6c, 0x6f, 0x67, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4c, 0x6f,
	0x67, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x43, 0x0a, 0x0b, 0x41,
	0x64, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x12, 0x19, 0x2e, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x6c, 0x6f, 0x67, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x41,
	0x64, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x6c, 0x6f,
	0x67, 0x2e, 0x69, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x3d, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x12,
	0x13, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x6c, 0x6f, 0x67, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x6c, 0x6f, 0x67,
	0x2e, 0x69, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_systemlog_proto_rawDescOnce sync.Once
	file_systemlog_proto_rawDescData = file_systemlog_proto_rawDesc
)

func file_systemlog_proto_rawDescGZIP() []byte {
	file_systemlog_proto_rawDescOnce.Do(func() {
		file_systemlog_proto_rawDescData = protoimpl.X.CompressGZIP(file_systemlog_proto_rawDescData)
	})
	return file_systemlog_proto_rawDescData
}

var file_systemlog_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_systemlog_proto_goTypes = []interface{}{
	(*EmptyReq)(nil),           // 0: systemlog.EmptyReq
	(*LoginLogsReq)(nil),       // 1: systemlog.LoginLogsReq
	(*LoginLogAddReq)(nil),     // 2: systemlog.LoginLogAddReq
	(*LoginLogInfoReply)(nil),  // 3: systemlog.LoginLogInfoReply
	(*LoginLogsInfoReply)(nil), // 4: systemlog.LoginLogsInfoReply
	(*IsSuccessReply)(nil),     // 5: systemlog.isSuccessReply
}
var file_systemlog_proto_depIdxs = []int32{
	3, // 0: systemlog.LoginLogsInfoReply.loginLogsInfo:type_name -> systemlog.LoginLogInfoReply
	1, // 1: systemlog.systemlog.getLoginLogs:input_type -> systemlog.LoginLogsReq
	2, // 2: systemlog.systemlog.AddLoginLog:input_type -> systemlog.LoginLogAddReq
	0, // 3: systemlog.systemlog.DelLoginLog:input_type -> systemlog.EmptyReq
	4, // 4: systemlog.systemlog.getLoginLogs:output_type -> systemlog.LoginLogsInfoReply
	5, // 5: systemlog.systemlog.AddLoginLog:output_type -> systemlog.isSuccessReply
	5, // 6: systemlog.systemlog.DelLoginLog:output_type -> systemlog.isSuccessReply
	4, // [4:7] is the sub-list for method output_type
	1, // [1:4] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_systemlog_proto_init() }
func file_systemlog_proto_init() {
	if File_systemlog_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_systemlog_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_systemlog_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginLogsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_systemlog_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginLogAddReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_systemlog_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginLogInfoReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_systemlog_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginLogsInfoReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_systemlog_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsSuccessReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_systemlog_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_systemlog_proto_goTypes,
		DependencyIndexes: file_systemlog_proto_depIdxs,
		MessageInfos:      file_systemlog_proto_msgTypes,
	}.Build()
	File_systemlog_proto = out.File
	file_systemlog_proto_rawDesc = nil
	file_systemlog_proto_goTypes = nil
	file_systemlog_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SystemlogClient is the client API for Systemlog service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SystemlogClient interface {
	GetLoginLogs(ctx context.Context, in *LoginLogsReq, opts ...grpc.CallOption) (*LoginLogsInfoReply, error)
	AddLoginLog(ctx context.Context, in *LoginLogAddReq, opts ...grpc.CallOption) (*IsSuccessReply, error)
	DelLoginLog(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*IsSuccessReply, error)
}

type systemlogClient struct {
	cc grpc.ClientConnInterface
}

func NewSystemlogClient(cc grpc.ClientConnInterface) SystemlogClient {
	return &systemlogClient{cc}
}

func (c *systemlogClient) GetLoginLogs(ctx context.Context, in *LoginLogsReq, opts ...grpc.CallOption) (*LoginLogsInfoReply, error) {
	out := new(LoginLogsInfoReply)
	err := c.cc.Invoke(ctx, "/systemlog.systemlog/getLoginLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemlogClient) AddLoginLog(ctx context.Context, in *LoginLogAddReq, opts ...grpc.CallOption) (*IsSuccessReply, error) {
	out := new(IsSuccessReply)
	err := c.cc.Invoke(ctx, "/systemlog.systemlog/AddLoginLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemlogClient) DelLoginLog(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*IsSuccessReply, error) {
	out := new(IsSuccessReply)
	err := c.cc.Invoke(ctx, "/systemlog.systemlog/DelLoginLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SystemlogServer is the server API for Systemlog service.
type SystemlogServer interface {
	GetLoginLogs(context.Context, *LoginLogsReq) (*LoginLogsInfoReply, error)
	AddLoginLog(context.Context, *LoginLogAddReq) (*IsSuccessReply, error)
	DelLoginLog(context.Context, *EmptyReq) (*IsSuccessReply, error)
}

// UnimplementedSystemlogServer can be embedded to have forward compatible implementations.
type UnimplementedSystemlogServer struct {
}

func (*UnimplementedSystemlogServer) GetLoginLogs(context.Context, *LoginLogsReq) (*LoginLogsInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoginLogs not implemented")
}
func (*UnimplementedSystemlogServer) AddLoginLog(context.Context, *LoginLogAddReq) (*IsSuccessReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLoginLog not implemented")
}
func (*UnimplementedSystemlogServer) DelLoginLog(context.Context, *EmptyReq) (*IsSuccessReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelLoginLog not implemented")
}

func RegisterSystemlogServer(s *grpc.Server, srv SystemlogServer) {
	s.RegisterService(&_Systemlog_serviceDesc, srv)
}

func _Systemlog_GetLoginLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginLogsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemlogServer).GetLoginLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/systemlog.systemlog/GetLoginLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemlogServer).GetLoginLogs(ctx, req.(*LoginLogsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Systemlog_AddLoginLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginLogAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemlogServer).AddLoginLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/systemlog.systemlog/AddLoginLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemlogServer).AddLoginLog(ctx, req.(*LoginLogAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Systemlog_DelLoginLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemlogServer).DelLoginLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/systemlog.systemlog/DelLoginLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemlogServer).DelLoginLog(ctx, req.(*EmptyReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Systemlog_serviceDesc = grpc.ServiceDesc{
	ServiceName: "systemlog.systemlog",
	HandlerType: (*SystemlogServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getLoginLogs",
			Handler:    _Systemlog_GetLoginLogs_Handler,
		},
		{
			MethodName: "AddLoginLog",
			Handler:    _Systemlog_AddLoginLog_Handler,
		},
		{
			MethodName: "DelLoginLog",
			Handler:    _Systemlog_DelLoginLog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "systemlog.proto",
}
