// Code generated by goctl. DO NOT EDIT!
// Source: systemlog.proto

package systemlogclient

import (
	"context"

	"go-zero-admin-server/service/systemlog/rpc/systemlog"

	"github.com/tal-tech/go-zero/zrpc"
)

type (
	EmptyReq           = systemlog.EmptyReq
	LoginLogsReq       = systemlog.LoginLogsReq
	LoginLogAddReq     = systemlog.LoginLogAddReq
	LoginLogInfoReply  = systemlog.LoginLogInfoReply
	LoginLogsInfoReply = systemlog.LoginLogsInfoReply
	IsSuccessReply     = systemlog.IsSuccessReply

	Systemlog interface {
		GetLoginLogs(ctx context.Context, in *LoginLogsReq) (*LoginLogsInfoReply, error)
		AddLoginLog(ctx context.Context, in *LoginLogAddReq) (*IsSuccessReply, error)
		DelLoginLog(ctx context.Context, in *EmptyReq) (*IsSuccessReply, error)
	}

	defaultSystemlog struct {
		cli zrpc.Client
	}
)

func NewSystemlog(cli zrpc.Client) Systemlog {
	return &defaultSystemlog{
		cli: cli,
	}
}

func (m *defaultSystemlog) GetLoginLogs(ctx context.Context, in *LoginLogsReq) (*LoginLogsInfoReply, error) {
	client := systemlog.NewSystemlogClient(m.cli.Conn())
	return client.GetLoginLogs(ctx, in)
}

func (m *defaultSystemlog) AddLoginLog(ctx context.Context, in *LoginLogAddReq) (*IsSuccessReply, error) {
	client := systemlog.NewSystemlogClient(m.cli.Conn())
	return client.AddLoginLog(ctx, in)
}

func (m *defaultSystemlog) DelLoginLog(ctx context.Context, in *EmptyReq) (*IsSuccessReply, error) {
	client := systemlog.NewSystemlogClient(m.cli.Conn())
	return client.DelLoginLog(ctx, in)
}
