// Code generated by goctl. DO NOT EDIT!
// Source: lend.proto

package lendclient

import (
	"context"

	"go-zero-admin-server/service/lend/rpc/lend"

	"github.com/tal-tech/go-zero/zrpc"
)

type (
	LendAddReq     = lend.LendAddReq
	LendInfoReply  = lend.LendInfoReply
	LendsInfoReply = lend.LendsInfoReply
	IsExistReply   = lend.IsExistReply
	IsSuccessReply = lend.IsSuccessReply
	IdReq          = lend.IdReq
	LendsReq       = lend.LendsReq
	IsLendReply    = lend.IsLendReply
	EmptyReq       = lend.EmptyReq
	BookIdReq      = lend.BookIdReq

	Lend interface {
		IsExistLendById(ctx context.Context, in *IdReq) (*IsExistReply, error)
		IsLend(ctx context.Context, in *BookIdReq) (*IsLendReply, error)
		GetLends(ctx context.Context, in *LendsReq) (*LendsInfoReply, error)
		AddLend(ctx context.Context, in *LendAddReq) (*IsSuccessReply, error)
		DelLend(ctx context.Context, in *IdReq) (*IsSuccessReply, error)
	}

	defaultLend struct {
		cli zrpc.Client
	}
)

func NewLend(cli zrpc.Client) Lend {
	return &defaultLend{
		cli: cli,
	}
}

func (m *defaultLend) IsExistLendById(ctx context.Context, in *IdReq) (*IsExistReply, error) {
	client := lend.NewLendClient(m.cli.Conn())
	return client.IsExistLendById(ctx, in)
}

func (m *defaultLend) IsLend(ctx context.Context, in *BookIdReq) (*IsLendReply, error) {
	client := lend.NewLendClient(m.cli.Conn())
	return client.IsLend(ctx, in)
}

func (m *defaultLend) GetLends(ctx context.Context, in *LendsReq) (*LendsInfoReply, error) {
	client := lend.NewLendClient(m.cli.Conn())
	return client.GetLends(ctx, in)
}

func (m *defaultLend) AddLend(ctx context.Context, in *LendAddReq) (*IsSuccessReply, error) {
	client := lend.NewLendClient(m.cli.Conn())
	return client.AddLend(ctx, in)
}

func (m *defaultLend) DelLend(ctx context.Context, in *IdReq) (*IsSuccessReply, error) {
	client := lend.NewLendClient(m.cli.Conn())
	return client.DelLend(ctx, in)
}
