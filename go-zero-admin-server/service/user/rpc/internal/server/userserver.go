// Code generated by goctl. DO NOT EDIT!
// Source: user.proto

package server

import (
	"context"

	"go-zero-admin-server/service/user/rpc/internal/logic"
	"go-zero-admin-server/service/user/rpc/internal/svc"
	"go-zero-admin-server/service/user/rpc/user"
)

type UserServer struct {
	svcCtx *svc.ServiceContext
}

func NewUserServer(svcCtx *svc.ServiceContext) *UserServer {
	return &UserServer{
		svcCtx: svcCtx,
	}
}

func (s *UserServer) GetUserById(ctx context.Context, in *user.IdReq) (*user.UserInfoReply, error) {
	l := logic.NewGetUserByIdLogic(ctx, s.svcCtx)
	return l.GetUserById(in)
}

func (s *UserServer) GetUserByUsername(ctx context.Context, in *user.UsernameReq) (*user.UserInfoReply, error) {
	l := logic.NewGetUserByUsernameLogic(ctx, s.svcCtx)
	return l.GetUserByUsername(in)
}

func (s *UserServer) IsExistUserById(ctx context.Context, in *user.IdReq) (*user.IsExistReply, error) {
	l := logic.NewIsExistUserByIdLogic(ctx, s.svcCtx)
	return l.IsExistUserById(in)
}

func (s *UserServer) IsExistUserByUsername(ctx context.Context, in *user.UsernameReq) (*user.IsExistReply, error) {
	l := logic.NewIsExistUserByUsernameLogic(ctx, s.svcCtx)
	return l.IsExistUserByUsername(in)
}

func (s *UserServer) GetUsers(ctx context.Context, in *user.UsersReq) (*user.UsersInfoReply, error) {
	l := logic.NewGetUsersLogic(ctx, s.svcCtx)
	return l.GetUsers(in)
}

func (s *UserServer) AddUser(ctx context.Context, in *user.UserAddReq) (*user.IsSuccessReply, error) {
	l := logic.NewAddUserLogic(ctx, s.svcCtx)
	return l.AddUser(in)
}

func (s *UserServer) UpdateUser(ctx context.Context, in *user.UserUpdateReq) (*user.IsSuccessReply, error) {
	l := logic.NewUpdateUserLogic(ctx, s.svcCtx)
	return l.UpdateUser(in)
}

func (s *UserServer) DelUser(ctx context.Context, in *user.IdReq) (*user.IsSuccessReply, error) {
	l := logic.NewDelUserLogic(ctx, s.svcCtx)
	return l.DelUser(in)
}

func (s *UserServer) DelSomeUser(ctx context.Context, in *user.IdsReq) (*user.IsSuccessReply, error) {
	l := logic.NewDelSomeUserLogic(ctx, s.svcCtx)
	return l.DelSomeUser(in)
}
