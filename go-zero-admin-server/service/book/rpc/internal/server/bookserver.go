// Code generated by goctl. DO NOT EDIT!
// Source: book.proto

package server

import (
	"context"

	"go-zero-admin-server/service/book/rpc/book"
	"go-zero-admin-server/service/book/rpc/internal/logic"
	"go-zero-admin-server/service/book/rpc/internal/svc"
)

type BookServer struct {
	svcCtx *svc.ServiceContext
}

func NewBookServer(svcCtx *svc.ServiceContext) *BookServer {
	return &BookServer{
		svcCtx: svcCtx,
	}
}

func (s *BookServer) GetBookById(ctx context.Context, in *book.IdReq) (*book.BookInfoReply, error) {
	l := logic.NewGetBookByIdLogic(ctx, s.svcCtx)
	return l.GetBookById(in)
}

func (s *BookServer) GetBookByNameLike(ctx context.Context, in *book.NameReq) (*book.BooksInfoReply, error) {
	l := logic.NewGetBookByNameLikeLogic(ctx, s.svcCtx)
	return l.GetBookByNameLike(in)
}

func (s *BookServer) IsExistBookById(ctx context.Context, in *book.IdReq) (*book.IsExistReply, error) {
	l := logic.NewIsExistBookByIdLogic(ctx, s.svcCtx)
	return l.IsExistBookById(in)
}

func (s *BookServer) IsExistBookByName(ctx context.Context, in *book.NameReq) (*book.IsExistReply, error) {
	l := logic.NewIsExistBookByNameLogic(ctx, s.svcCtx)
	return l.IsExistBookByName(in)
}

func (s *BookServer) GetBooks(ctx context.Context, in *book.BooksReq) (*book.BooksInfoReply, error) {
	l := logic.NewGetBooksLogic(ctx, s.svcCtx)
	return l.GetBooks(in)
}

func (s *BookServer) AddBook(ctx context.Context, in *book.BookAddReq) (*book.IsSuccessReply, error) {
	l := logic.NewAddBookLogic(ctx, s.svcCtx)
	return l.AddBook(in)
}

func (s *BookServer) UpdateBook(ctx context.Context, in *book.BookUpdateReq) (*book.IsSuccessReply, error) {
	l := logic.NewUpdateBookLogic(ctx, s.svcCtx)
	return l.UpdateBook(in)
}

func (s *BookServer) DelBook(ctx context.Context, in *book.IdReq) (*book.IsSuccessReply, error) {
	l := logic.NewDelBookLogic(ctx, s.svcCtx)
	return l.DelBook(in)
}

func (s *BookServer) DelSomeBook(ctx context.Context, in *book.IdsReq) (*book.IsSuccessReply, error) {
	l := logic.NewDelSomeBookLogic(ctx, s.svcCtx)
	return l.DelSomeBook(in)
}

func (s *BookServer) GetTypeById(ctx context.Context, in *book.IdReq) (*book.TypeInfoReply, error) {
	l := logic.NewGetTypeByIdLogic(ctx, s.svcCtx)
	return l.GetTypeById(in)
}

func (s *BookServer) GetAllTypes(ctx context.Context, in *book.EmptyReq) (*book.TypesInfoReply, error) {
	l := logic.NewGetAllTypesLogic(ctx, s.svcCtx)
	return l.GetAllTypes(in)
}

func (s *BookServer) GetTypeByNameLike(ctx context.Context, in *book.NameReq) (*book.TypesInfoReply, error) {
	l := logic.NewGetTypeByNameLikeLogic(ctx, s.svcCtx)
	return l.GetTypeByNameLike(in)
}

func (s *BookServer) IsExistTypeById(ctx context.Context, in *book.IdReq) (*book.IsExistReply, error) {
	l := logic.NewIsExistTypeByIdLogic(ctx, s.svcCtx)
	return l.IsExistTypeById(in)
}

func (s *BookServer) IsExistTypeByName(ctx context.Context, in *book.NameReq) (*book.IsExistReply, error) {
	l := logic.NewIsExistTypeByNameLogic(ctx, s.svcCtx)
	return l.IsExistTypeByName(in)
}

func (s *BookServer) GetTypes(ctx context.Context, in *book.TypesReq) (*book.TypesInfoReply, error) {
	l := logic.NewGetTypesLogic(ctx, s.svcCtx)
	return l.GetTypes(in)
}

func (s *BookServer) AddType(ctx context.Context, in *book.TypeAddReq) (*book.IsSuccessReply, error) {
	l := logic.NewAddTypeLogic(ctx, s.svcCtx)
	return l.AddType(in)
}

func (s *BookServer) UpdateType(ctx context.Context, in *book.TypeUpdateReq) (*book.IsSuccessReply, error) {
	l := logic.NewUpdateTypeLogic(ctx, s.svcCtx)
	return l.UpdateType(in)
}

func (s *BookServer) DelType(ctx context.Context, in *book.IdReq) (*book.IsSuccessReply, error) {
	l := logic.NewDelTypeLogic(ctx, s.svcCtx)
	return l.DelType(in)
}
