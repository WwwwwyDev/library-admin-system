// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: book.proto

package book

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EmptyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyReq) Reset() {
	*x = EmptyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_book_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyReq) ProtoMessage() {}

func (x *EmptyReq) ProtoReflect() protoreflect.Message {
	mi := &file_book_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyReq.ProtoReflect.Descriptor instead.
func (*EmptyReq) Descriptor() ([]byte, []int) {
	return file_book_proto_rawDescGZIP(), []int{0}
}

type IdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *IdReq) Reset() {
	*x = IdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_book_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdReq) ProtoMessage() {}

func (x *IdReq) ProtoReflect() protoreflect.Message {
	mi := &file_book_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdReq.ProtoReflect.Descriptor instead.
func (*IdReq) Descriptor() ([]byte, []int) {
	return file_book_proto_rawDescGZIP(), []int{1}
}

func (x *IdReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type IdsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []*IdReq `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *IdsReq) Reset() {
	*x = IdsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_book_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdsReq) ProtoMessage() {}

func (x *IdsReq) ProtoReflect() protoreflect.Message {
	mi := &file_book_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdsReq.ProtoReflect.Descriptor instead.
func (*IdsReq) Descriptor() ([]byte, []int) {
	return file_book_proto_rawDescGZIP(), []int{2}
}

func (x *IdsReq) GetIds() []*IdReq {
	if x != nil {
		return x.Ids
	}
	return nil
}

type NameReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *NameReq) Reset() {
	*x = NameReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_book_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NameReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NameReq) ProtoMessage() {}

func (x *NameReq) ProtoReflect() protoreflect.Message {
	mi := &file_book_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NameReq.ProtoReflect.Descriptor instead.
func (*NameReq) Descriptor() ([]byte, []int) {
	return file_book_proto_rawDescGZIP(), []int{3}
}

func (x *NameReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type TypesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page  int64  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Limit int64  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Name  string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *TypesReq) Reset() {
	*x = TypesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_book_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypesReq) ProtoMessage() {}

func (x *TypesReq) ProtoReflect() protoreflect.Message {
	mi := &file_book_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypesReq.ProtoReflect.Descriptor instead.
func (*TypesReq) Descriptor() ([]byte, []int) {
	return file_book_proto_rawDescGZIP(), []int{4}
}

func (x *TypesReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *TypesReq) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *TypesReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type TypeUpdateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Intro string `protobuf:"bytes,3,opt,name=intro,proto3" json:"intro,omitempty"`
}

func (x *TypeUpdateReq) Reset() {
	*x = TypeUpdateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_book_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeUpdateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeUpdateReq) ProtoMessage() {}

func (x *TypeUpdateReq) ProtoReflect() protoreflect.Message {
	mi := &file_book_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeUpdateReq.ProtoReflect.Descriptor instead.
func (*TypeUpdateReq) Descriptor() ([]byte, []int) {
	return file_book_proto_rawDescGZIP(), []int{5}
}

func (x *TypeUpdateReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TypeUpdateReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TypeUpdateReq) GetIntro() string {
	if x != nil {
		return x.Intro
	}
	return ""
}

type TypeAddReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Intro string `protobuf:"bytes,2,opt,name=intro,proto3" json:"intro,omitempty"`
}

func (x *TypeAddReq) Reset() {
	*x = TypeAddReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_book_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeAddReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeAddReq) ProtoMessage() {}

func (x *TypeAddReq) ProtoReflect() protoreflect.Message {
	mi := &file_book_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeAddReq.ProtoReflect.Descriptor instead.
func (*TypeAddReq) Descriptor() ([]byte, []int) {
	return file_book_proto_rawDescGZIP(), []int{6}
}

func (x *TypeAddReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TypeAddReq) GetIntro() string {
	if x != nil {
		return x.Intro
	}
	return ""
}

type BooksReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page   int64  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Limit  int64  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Name   string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Author string `protobuf:"bytes,4,opt,name=author,proto3" json:"author,omitempty"`
}

func (x *BooksReq) Reset() {
	*x = BooksReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_book_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BooksReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BooksReq) ProtoMessage() {}

func (x *BooksReq) ProtoReflect() protoreflect.Message {
	mi := &file_book_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BooksReq.ProtoReflect.Descriptor instead.
func (*BooksReq) Descriptor() ([]byte, []int) {
	return file_book_proto_rawDescGZIP(), []int{7}
}

func (x *BooksReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *BooksReq) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *BooksReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BooksReq) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

type BookUpdateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Image  string `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
	Author string `protobuf:"bytes,4,opt,name=author,proto3" json:"author,omitempty"`
	Info   string `protobuf:"bytes,5,opt,name=info,proto3" json:"info,omitempty"`
	TypeId uint64 `protobuf:"varint,6,opt,name=typeId,proto3" json:"typeId,omitempty"`
}

func (x *BookUpdateReq) Reset() {
	*x = BookUpdateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_book_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BookUpdateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BookUpdateReq) ProtoMessage() {}

func (x *BookUpdateReq) ProtoReflect() protoreflect.Message {
	mi := &file_book_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BookUpdateReq.ProtoReflect.Descriptor instead.
func (*BookUpdateReq) Descriptor() ([]byte, []int) {
	return file_book_proto_rawDescGZIP(), []int{8}
}

func (x *BookUpdateReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BookUpdateReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BookUpdateReq) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *BookUpdateReq) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *BookUpdateReq) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

func (x *BookUpdateReq) GetTypeId() uint64 {
	if x != nil {
		return x.TypeId
	}
	return 0
}

type BookAddReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Image  string `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	Author string `protobuf:"bytes,3,opt,name=author,proto3" json:"author,omitempty"`
	Info   string `protobuf:"bytes,4,opt,name=info,proto3" json:"info,omitempty"`
	TypeId uint64 `protobuf:"varint,6,opt,name=typeId,proto3" json:"typeId,omitempty"`
}

func (x *BookAddReq) Reset() {
	*x = BookAddReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_book_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BookAddReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BookAddReq) ProtoMessage() {}

func (x *BookAddReq) ProtoReflect() protoreflect.Message {
	mi := &file_book_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BookAddReq.ProtoReflect.Descriptor instead.
func (*BookAddReq) Descriptor() ([]byte, []int) {
	return file_book_proto_rawDescGZIP(), []int{9}
}

func (x *BookAddReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BookAddReq) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *BookAddReq) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *BookAddReq) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

func (x *BookAddReq) GetTypeId() uint64 {
	if x != nil {
		return x.TypeId
	}
	return 0
}

type TypeInfoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint64           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string           `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Intro     string           `protobuf:"bytes,3,opt,name=intro,proto3" json:"intro,omitempty"`
	BooksInfo []*BookInfoReply `protobuf:"bytes,4,rep,name=booksInfo,proto3" json:"booksInfo,omitempty"`
}

func (x *TypeInfoReply) Reset() {
	*x = TypeInfoReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_book_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeInfoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeInfoReply) ProtoMessage() {}

func (x *TypeInfoReply) ProtoReflect() protoreflect.Message {
	mi := &file_book_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeInfoReply.ProtoReflect.Descriptor instead.
func (*TypeInfoReply) Descriptor() ([]byte, []int) {
	return file_book_proto_rawDescGZIP(), []int{10}
}

func (x *TypeInfoReply) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TypeInfoReply) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TypeInfoReply) GetIntro() string {
	if x != nil {
		return x.Intro
	}
	return ""
}

func (x *TypeInfoReply) GetBooksInfo() []*BookInfoReply {
	if x != nil {
		return x.BooksInfo
	}
	return nil
}

type TypesInfoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total     int64            `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	TypesInfo []*TypeInfoReply `protobuf:"bytes,2,rep,name=typesInfo,proto3" json:"typesInfo,omitempty"`
}

func (x *TypesInfoReply) Reset() {
	*x = TypesInfoReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_book_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypesInfoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypesInfoReply) ProtoMessage() {}

func (x *TypesInfoReply) ProtoReflect() protoreflect.Message {
	mi := &file_book_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypesInfoReply.ProtoReflect.Descriptor instead.
func (*TypesInfoReply) Descriptor() ([]byte, []int) {
	return file_book_proto_rawDescGZIP(), []int{11}
}

func (x *TypesInfoReply) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *TypesInfoReply) GetTypesInfo() []*TypeInfoReply {
	if x != nil {
		return x.TypesInfo
	}
	return nil
}

type BookInfoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Image  string `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
	Author string `protobuf:"bytes,4,opt,name=author,proto3" json:"author,omitempty"`
	Info   string `protobuf:"bytes,5,opt,name=info,proto3" json:"info,omitempty"`
	Type   string `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
	TypeId uint64 `protobuf:"varint,7,opt,name=typeId,proto3" json:"typeId,omitempty"`
}

func (x *BookInfoReply) Reset() {
	*x = BookInfoReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_book_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BookInfoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BookInfoReply) ProtoMessage() {}

func (x *BookInfoReply) ProtoReflect() protoreflect.Message {
	mi := &file_book_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BookInfoReply.ProtoReflect.Descriptor instead.
func (*BookInfoReply) Descriptor() ([]byte, []int) {
	return file_book_proto_rawDescGZIP(), []int{12}
}

func (x *BookInfoReply) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BookInfoReply) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BookInfoReply) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *BookInfoReply) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *BookInfoReply) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

func (x *BookInfoReply) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *BookInfoReply) GetTypeId() uint64 {
	if x != nil {
		return x.TypeId
	}
	return 0
}

type BooksInfoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total     int64            `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	BooksInfo []*BookInfoReply `protobuf:"bytes,2,rep,name=booksInfo,proto3" json:"booksInfo,omitempty"`
}

func (x *BooksInfoReply) Reset() {
	*x = BooksInfoReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_book_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BooksInfoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BooksInfoReply) ProtoMessage() {}

func (x *BooksInfoReply) ProtoReflect() protoreflect.Message {
	mi := &file_book_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BooksInfoReply.ProtoReflect.Descriptor instead.
func (*BooksInfoReply) Descriptor() ([]byte, []int) {
	return file_book_proto_rawDescGZIP(), []int{13}
}

func (x *BooksInfoReply) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *BooksInfoReply) GetBooksInfo() []*BookInfoReply {
	if x != nil {
		return x.BooksInfo
	}
	return nil
}

type IsExistReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsExist bool `protobuf:"varint,1,opt,name=isExist,proto3" json:"isExist,omitempty"`
}

func (x *IsExistReply) Reset() {
	*x = IsExistReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_book_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsExistReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsExistReply) ProtoMessage() {}

func (x *IsExistReply) ProtoReflect() protoreflect.Message {
	mi := &file_book_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsExistReply.ProtoReflect.Descriptor instead.
func (*IsExistReply) Descriptor() ([]byte, []int) {
	return file_book_proto_rawDescGZIP(), []int{14}
}

func (x *IsExistReply) GetIsExist() bool {
	if x != nil {
		return x.IsExist
	}
	return false
}

type IsSuccessReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsSuccess bool `protobuf:"varint,1,opt,name=isSuccess,proto3" json:"isSuccess,omitempty"`
}

func (x *IsSuccessReply) Reset() {
	*x = IsSuccessReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_book_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsSuccessReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsSuccessReply) ProtoMessage() {}

func (x *IsSuccessReply) ProtoReflect() protoreflect.Message {
	mi := &file_book_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsSuccessReply.ProtoReflect.Descriptor instead.
func (*IsSuccessReply) Descriptor() ([]byte, []int) {
	return file_book_proto_rawDescGZIP(), []int{15}
}

func (x *IsSuccessReply) GetIsSuccess() bool {
	if x != nil {
		return x.IsSuccess
	}
	return false
}

var File_book_proto protoreflect.FileDescriptor

var file_book_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x62, 0x6f,
	0x6f, 0x6b, 0x22, 0x0a, 0x0a, 0x08, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x22, 0x17,
	0x0a, 0x05, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x27, 0x0a, 0x06, 0x49, 0x64, 0x73, 0x52, 0x65,
	0x71, 0x12, 0x1d, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x52, 0x03, 0x69, 0x64, 0x73,
	0x22, 0x1d, 0x0a, 0x07, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x48, 0x0a, 0x08, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x49, 0x0a, 0x0d, 0x54, 0x79, 0x70,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69,
	0x6e, 0x74, 0x72, 0x6f, 0x22, 0x36, 0x0a, 0x0a, 0x54, 0x79, 0x70, 0x65, 0x41, 0x64, 0x64, 0x52,
	0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x22, 0x60, 0x0a, 0x08,
	0x42, 0x6f, 0x6f, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x22, 0x8d,
	0x01, 0x0a, 0x0d, 0x42, 0x6f, 0x6f, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x22, 0x7a,
	0x0a, 0x0a, 0x42, 0x6f, 0x6f, 0x6b, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6e,
	0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x22, 0x7c, 0x0a, 0x0d, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x69, 0x6e, 0x74, 0x72, 0x6f, 0x12, 0x31, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x2e,
	0x42, 0x6f, 0x6f, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x09, 0x62,
	0x6f, 0x6f, 0x6b, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x59, 0x0a, 0x0e, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x31, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x09, 0x74, 0x79, 0x70, 0x65, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0xa1, 0x01, 0x0a, 0x0d, 0x42, 0x6f, 0x6f, 0x6b, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x22, 0x59, 0x0a, 0x0e, 0x42, 0x6f, 0x6f, 0x6b, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x31, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x28, 0x0a, 0x0c, 0x69, 0x73, 0x45, 0x78, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x45, 0x78, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x45, 0x78, 0x69, 0x73, 0x74, 0x22, 0x2e, 0x0a, 0x0e,
	0x69, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1c,
	0x0a, 0x09, 0x69, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x69, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x32, 0xff, 0x06, 0x0a,
	0x04, 0x42, 0x6f, 0x6f, 0x6b, 0x12, 0x2f, 0x0a, 0x0b, 0x67, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6b,
	0x42, 0x79, 0x49, 0x64, 0x12, 0x0b, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x2e, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x1a, 0x13, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x38, 0x0a, 0x11, 0x67, 0x65, 0x74, 0x42, 0x6f, 0x6f,
	0x6b, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x6b, 0x65, 0x12, 0x0d, 0x2e, 0x62, 0x6f,
	0x6f, 0x6b, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x62, 0x6f, 0x6f,
	0x6b, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x32, 0x0a, 0x0f, 0x49, 0x73, 0x45, 0x78, 0x69, 0x73, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x42,
	0x79, 0x49, 0x64, 0x12, 0x0b, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71,
	0x1a, 0x12, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x2e, 0x69, 0x73, 0x45, 0x78, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x36, 0x0a, 0x11, 0x49, 0x73, 0x45, 0x78, 0x69, 0x73, 0x74, 0x42,
	0x6f, 0x6f, 0x6b, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0d, 0x2e, 0x62, 0x6f, 0x6f, 0x6b,
	0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x2e,
	0x69, 0x73, 0x45, 0x78, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x30, 0x0a, 0x08,
	0x67, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x73, 0x12, 0x0e, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x2e,
	0x42, 0x6f, 0x6f, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x2e,
	0x42, 0x6f, 0x6f, 0x6b, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x31,
	0x0a, 0x07, 0x41, 0x64, 0x64, 0x42, 0x6f, 0x6f, 0x6b, 0x12, 0x10, 0x2e, 0x62, 0x6f, 0x6f, 0x6b,
	0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x62, 0x6f,
	0x6f, 0x6b, 0x2e, 0x69, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x37, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x12,
	0x13, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x2e, 0x69, 0x73, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2c, 0x0a, 0x07, 0x44, 0x65,
	0x6c, 0x42, 0x6f, 0x6f, 0x6b, 0x12, 0x0b, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x2e, 0x49, 0x64, 0x52,
	0x65, 0x71, 0x1a, 0x14, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x2e, 0x69, 0x73, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x31, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x53,
	0x6f, 0x6d, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x12, 0x0c, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x2e, 0x49,
	0x64, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x2e, 0x69, 0x73, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2f, 0x0a, 0x0b, 0x67,
	0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x79, 0x49, 0x64, 0x12, 0x0b, 0x2e, 0x62, 0x6f, 0x6f,
	0x6b, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x38, 0x0a, 0x11,
	0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x6b,
	0x65, 0x12, 0x0d, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x14, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x32, 0x0a, 0x0f, 0x49, 0x73, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x79, 0x49, 0x64, 0x12, 0x0b, 0x2e, 0x62, 0x6f, 0x6f, 0x6b,
	0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x2e, 0x69, 0x73,
	0x45, 0x78, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x36, 0x0a, 0x11, 0x49, 0x73,
	0x45, 0x78, 0x69, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x0d, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x12,
	0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x2e, 0x69, 0x73, 0x45, 0x78, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x30, 0x0a, 0x08, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x0e,
	0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x14,
	0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x31, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x10, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x41, 0x64, 0x64, 0x52, 0x65,
	0x71, 0x1a, 0x14, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x2e, 0x69, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x37, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x62, 0x6f, 0x6f,
	0x6b, 0x2e, 0x69, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x2c, 0x0a, 0x07, 0x44, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x2e, 0x62, 0x6f,
	0x6f, 0x6b, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x2e,
	0x69, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_book_proto_rawDescOnce sync.Once
	file_book_proto_rawDescData = file_book_proto_rawDesc
)

func file_book_proto_rawDescGZIP() []byte {
	file_book_proto_rawDescOnce.Do(func() {
		file_book_proto_rawDescData = protoimpl.X.CompressGZIP(file_book_proto_rawDescData)
	})
	return file_book_proto_rawDescData
}

var file_book_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_book_proto_goTypes = []interface{}{
	(*EmptyReq)(nil),       // 0: book.EmptyReq
	(*IdReq)(nil),          // 1: book.IdReq
	(*IdsReq)(nil),         // 2: book.IdsReq
	(*NameReq)(nil),        // 3: book.NameReq
	(*TypesReq)(nil),       // 4: book.TypesReq
	(*TypeUpdateReq)(nil),  // 5: book.TypeUpdateReq
	(*TypeAddReq)(nil),     // 6: book.TypeAddReq
	(*BooksReq)(nil),       // 7: book.BooksReq
	(*BookUpdateReq)(nil),  // 8: book.BookUpdateReq
	(*BookAddReq)(nil),     // 9: book.BookAddReq
	(*TypeInfoReply)(nil),  // 10: book.TypeInfoReply
	(*TypesInfoReply)(nil), // 11: book.TypesInfoReply
	(*BookInfoReply)(nil),  // 12: book.BookInfoReply
	(*BooksInfoReply)(nil), // 13: book.BooksInfoReply
	(*IsExistReply)(nil),   // 14: book.isExistReply
	(*IsSuccessReply)(nil), // 15: book.isSuccessReply
}
var file_book_proto_depIdxs = []int32{
	1,  // 0: book.IdsReq.ids:type_name -> book.IdReq
	12, // 1: book.TypeInfoReply.booksInfo:type_name -> book.BookInfoReply
	10, // 2: book.TypesInfoReply.typesInfo:type_name -> book.TypeInfoReply
	12, // 3: book.BooksInfoReply.booksInfo:type_name -> book.BookInfoReply
	1,  // 4: book.Book.getBookById:input_type -> book.IdReq
	3,  // 5: book.Book.getBookByNameLike:input_type -> book.NameReq
	1,  // 6: book.Book.IsExistBookById:input_type -> book.IdReq
	3,  // 7: book.Book.IsExistBookByName:input_type -> book.NameReq
	7,  // 8: book.Book.getBooks:input_type -> book.BooksReq
	9,  // 9: book.Book.AddBook:input_type -> book.BookAddReq
	8,  // 10: book.Book.UpdateBook:input_type -> book.BookUpdateReq
	1,  // 11: book.Book.DelBook:input_type -> book.IdReq
	2,  // 12: book.Book.DelSomeBook:input_type -> book.IdsReq
	1,  // 13: book.Book.getTypeById:input_type -> book.IdReq
	3,  // 14: book.Book.getTypeByNameLike:input_type -> book.NameReq
	1,  // 15: book.Book.IsExistTypeById:input_type -> book.IdReq
	3,  // 16: book.Book.IsExistTypeByName:input_type -> book.NameReq
	4,  // 17: book.Book.getTypes:input_type -> book.TypesReq
	6,  // 18: book.Book.AddType:input_type -> book.TypeAddReq
	5,  // 19: book.Book.UpdateType:input_type -> book.TypeUpdateReq
	1,  // 20: book.Book.DelType:input_type -> book.IdReq
	12, // 21: book.Book.getBookById:output_type -> book.BookInfoReply
	13, // 22: book.Book.getBookByNameLike:output_type -> book.BooksInfoReply
	14, // 23: book.Book.IsExistBookById:output_type -> book.isExistReply
	14, // 24: book.Book.IsExistBookByName:output_type -> book.isExistReply
	13, // 25: book.Book.getBooks:output_type -> book.BooksInfoReply
	15, // 26: book.Book.AddBook:output_type -> book.isSuccessReply
	15, // 27: book.Book.UpdateBook:output_type -> book.isSuccessReply
	15, // 28: book.Book.DelBook:output_type -> book.isSuccessReply
	15, // 29: book.Book.DelSomeBook:output_type -> book.isSuccessReply
	10, // 30: book.Book.getTypeById:output_type -> book.TypeInfoReply
	11, // 31: book.Book.getTypeByNameLike:output_type -> book.TypesInfoReply
	14, // 32: book.Book.IsExistTypeById:output_type -> book.isExistReply
	14, // 33: book.Book.IsExistTypeByName:output_type -> book.isExistReply
	11, // 34: book.Book.getTypes:output_type -> book.TypesInfoReply
	15, // 35: book.Book.AddType:output_type -> book.isSuccessReply
	15, // 36: book.Book.UpdateType:output_type -> book.isSuccessReply
	15, // 37: book.Book.DelType:output_type -> book.isSuccessReply
	21, // [21:38] is the sub-list for method output_type
	4,  // [4:21] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_book_proto_init() }
func file_book_proto_init() {
	if File_book_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_book_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_book_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_book_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_book_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NameReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_book_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_book_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypeUpdateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_book_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypeAddReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_book_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BooksReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_book_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BookUpdateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_book_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BookAddReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_book_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypeInfoReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_book_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypesInfoReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_book_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BookInfoReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_book_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BooksInfoReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_book_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsExistReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_book_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsSuccessReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_book_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_book_proto_goTypes,
		DependencyIndexes: file_book_proto_depIdxs,
		MessageInfos:      file_book_proto_msgTypes,
	}.Build()
	File_book_proto = out.File
	file_book_proto_rawDesc = nil
	file_book_proto_goTypes = nil
	file_book_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// BookClient is the client API for Book service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BookClient interface {
	GetBookById(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*BookInfoReply, error)
	GetBookByNameLike(ctx context.Context, in *NameReq, opts ...grpc.CallOption) (*BooksInfoReply, error)
	IsExistBookById(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*IsExistReply, error)
	IsExistBookByName(ctx context.Context, in *NameReq, opts ...grpc.CallOption) (*IsExistReply, error)
	GetBooks(ctx context.Context, in *BooksReq, opts ...grpc.CallOption) (*BooksInfoReply, error)
	AddBook(ctx context.Context, in *BookAddReq, opts ...grpc.CallOption) (*IsSuccessReply, error)
	UpdateBook(ctx context.Context, in *BookUpdateReq, opts ...grpc.CallOption) (*IsSuccessReply, error)
	DelBook(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*IsSuccessReply, error)
	DelSomeBook(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*IsSuccessReply, error)
	GetTypeById(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*TypeInfoReply, error)
	GetTypeByNameLike(ctx context.Context, in *NameReq, opts ...grpc.CallOption) (*TypesInfoReply, error)
	IsExistTypeById(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*IsExistReply, error)
	IsExistTypeByName(ctx context.Context, in *NameReq, opts ...grpc.CallOption) (*IsExistReply, error)
	GetTypes(ctx context.Context, in *TypesReq, opts ...grpc.CallOption) (*TypesInfoReply, error)
	AddType(ctx context.Context, in *TypeAddReq, opts ...grpc.CallOption) (*IsSuccessReply, error)
	UpdateType(ctx context.Context, in *TypeUpdateReq, opts ...grpc.CallOption) (*IsSuccessReply, error)
	DelType(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*IsSuccessReply, error)
}

type bookClient struct {
	cc grpc.ClientConnInterface
}

func NewBookClient(cc grpc.ClientConnInterface) BookClient {
	return &bookClient{cc}
}

func (c *bookClient) GetBookById(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*BookInfoReply, error) {
	out := new(BookInfoReply)
	err := c.cc.Invoke(ctx, "/book.Book/getBookById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookClient) GetBookByNameLike(ctx context.Context, in *NameReq, opts ...grpc.CallOption) (*BooksInfoReply, error) {
	out := new(BooksInfoReply)
	err := c.cc.Invoke(ctx, "/book.Book/getBookByNameLike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookClient) IsExistBookById(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*IsExistReply, error) {
	out := new(IsExistReply)
	err := c.cc.Invoke(ctx, "/book.Book/IsExistBookById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookClient) IsExistBookByName(ctx context.Context, in *NameReq, opts ...grpc.CallOption) (*IsExistReply, error) {
	out := new(IsExistReply)
	err := c.cc.Invoke(ctx, "/book.Book/IsExistBookByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookClient) GetBooks(ctx context.Context, in *BooksReq, opts ...grpc.CallOption) (*BooksInfoReply, error) {
	out := new(BooksInfoReply)
	err := c.cc.Invoke(ctx, "/book.Book/getBooks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookClient) AddBook(ctx context.Context, in *BookAddReq, opts ...grpc.CallOption) (*IsSuccessReply, error) {
	out := new(IsSuccessReply)
	err := c.cc.Invoke(ctx, "/book.Book/AddBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookClient) UpdateBook(ctx context.Context, in *BookUpdateReq, opts ...grpc.CallOption) (*IsSuccessReply, error) {
	out := new(IsSuccessReply)
	err := c.cc.Invoke(ctx, "/book.Book/UpdateBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookClient) DelBook(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*IsSuccessReply, error) {
	out := new(IsSuccessReply)
	err := c.cc.Invoke(ctx, "/book.Book/DelBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookClient) DelSomeBook(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*IsSuccessReply, error) {
	out := new(IsSuccessReply)
	err := c.cc.Invoke(ctx, "/book.Book/DelSomeBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookClient) GetTypeById(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*TypeInfoReply, error) {
	out := new(TypeInfoReply)
	err := c.cc.Invoke(ctx, "/book.Book/getTypeById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookClient) GetTypeByNameLike(ctx context.Context, in *NameReq, opts ...grpc.CallOption) (*TypesInfoReply, error) {
	out := new(TypesInfoReply)
	err := c.cc.Invoke(ctx, "/book.Book/getTypeByNameLike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookClient) IsExistTypeById(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*IsExistReply, error) {
	out := new(IsExistReply)
	err := c.cc.Invoke(ctx, "/book.Book/IsExistTypeById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookClient) IsExistTypeByName(ctx context.Context, in *NameReq, opts ...grpc.CallOption) (*IsExistReply, error) {
	out := new(IsExistReply)
	err := c.cc.Invoke(ctx, "/book.Book/IsExistTypeByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookClient) GetTypes(ctx context.Context, in *TypesReq, opts ...grpc.CallOption) (*TypesInfoReply, error) {
	out := new(TypesInfoReply)
	err := c.cc.Invoke(ctx, "/book.Book/getTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookClient) AddType(ctx context.Context, in *TypeAddReq, opts ...grpc.CallOption) (*IsSuccessReply, error) {
	out := new(IsSuccessReply)
	err := c.cc.Invoke(ctx, "/book.Book/AddType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookClient) UpdateType(ctx context.Context, in *TypeUpdateReq, opts ...grpc.CallOption) (*IsSuccessReply, error) {
	out := new(IsSuccessReply)
	err := c.cc.Invoke(ctx, "/book.Book/UpdateType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookClient) DelType(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*IsSuccessReply, error) {
	out := new(IsSuccessReply)
	err := c.cc.Invoke(ctx, "/book.Book/DelType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookServer is the server API for Book service.
type BookServer interface {
	GetBookById(context.Context, *IdReq) (*BookInfoReply, error)
	GetBookByNameLike(context.Context, *NameReq) (*BooksInfoReply, error)
	IsExistBookById(context.Context, *IdReq) (*IsExistReply, error)
	IsExistBookByName(context.Context, *NameReq) (*IsExistReply, error)
	GetBooks(context.Context, *BooksReq) (*BooksInfoReply, error)
	AddBook(context.Context, *BookAddReq) (*IsSuccessReply, error)
	UpdateBook(context.Context, *BookUpdateReq) (*IsSuccessReply, error)
	DelBook(context.Context, *IdReq) (*IsSuccessReply, error)
	DelSomeBook(context.Context, *IdsReq) (*IsSuccessReply, error)
	GetTypeById(context.Context, *IdReq) (*TypeInfoReply, error)
	GetTypeByNameLike(context.Context, *NameReq) (*TypesInfoReply, error)
	IsExistTypeById(context.Context, *IdReq) (*IsExistReply, error)
	IsExistTypeByName(context.Context, *NameReq) (*IsExistReply, error)
	GetTypes(context.Context, *TypesReq) (*TypesInfoReply, error)
	AddType(context.Context, *TypeAddReq) (*IsSuccessReply, error)
	UpdateType(context.Context, *TypeUpdateReq) (*IsSuccessReply, error)
	DelType(context.Context, *IdReq) (*IsSuccessReply, error)
}

// UnimplementedBookServer can be embedded to have forward compatible implementations.
type UnimplementedBookServer struct {
}

func (*UnimplementedBookServer) GetBookById(context.Context, *IdReq) (*BookInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBookById not implemented")
}
func (*UnimplementedBookServer) GetBookByNameLike(context.Context, *NameReq) (*BooksInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBookByNameLike not implemented")
}
func (*UnimplementedBookServer) IsExistBookById(context.Context, *IdReq) (*IsExistReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsExistBookById not implemented")
}
func (*UnimplementedBookServer) IsExistBookByName(context.Context, *NameReq) (*IsExistReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsExistBookByName not implemented")
}
func (*UnimplementedBookServer) GetBooks(context.Context, *BooksReq) (*BooksInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBooks not implemented")
}
func (*UnimplementedBookServer) AddBook(context.Context, *BookAddReq) (*IsSuccessReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBook not implemented")
}
func (*UnimplementedBookServer) UpdateBook(context.Context, *BookUpdateReq) (*IsSuccessReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBook not implemented")
}
func (*UnimplementedBookServer) DelBook(context.Context, *IdReq) (*IsSuccessReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelBook not implemented")
}
func (*UnimplementedBookServer) DelSomeBook(context.Context, *IdsReq) (*IsSuccessReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelSomeBook not implemented")
}
func (*UnimplementedBookServer) GetTypeById(context.Context, *IdReq) (*TypeInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTypeById not implemented")
}
func (*UnimplementedBookServer) GetTypeByNameLike(context.Context, *NameReq) (*TypesInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTypeByNameLike not implemented")
}
func (*UnimplementedBookServer) IsExistTypeById(context.Context, *IdReq) (*IsExistReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsExistTypeById not implemented")
}
func (*UnimplementedBookServer) IsExistTypeByName(context.Context, *NameReq) (*IsExistReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsExistTypeByName not implemented")
}
func (*UnimplementedBookServer) GetTypes(context.Context, *TypesReq) (*TypesInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTypes not implemented")
}
func (*UnimplementedBookServer) AddType(context.Context, *TypeAddReq) (*IsSuccessReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddType not implemented")
}
func (*UnimplementedBookServer) UpdateType(context.Context, *TypeUpdateReq) (*IsSuccessReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateType not implemented")
}
func (*UnimplementedBookServer) DelType(context.Context, *IdReq) (*IsSuccessReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelType not implemented")
}

func RegisterBookServer(s *grpc.Server, srv BookServer) {
	s.RegisterService(&_Book_serviceDesc, srv)
}

func _Book_GetBookById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServer).GetBookById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/book.Book/GetBookById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServer).GetBookById(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Book_GetBookByNameLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServer).GetBookByNameLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/book.Book/GetBookByNameLike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServer).GetBookByNameLike(ctx, req.(*NameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Book_IsExistBookById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServer).IsExistBookById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/book.Book/IsExistBookById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServer).IsExistBookById(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Book_IsExistBookByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServer).IsExistBookByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/book.Book/IsExistBookByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServer).IsExistBookByName(ctx, req.(*NameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Book_GetBooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BooksReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServer).GetBooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/book.Book/GetBooks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServer).GetBooks(ctx, req.(*BooksReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Book_AddBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServer).AddBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/book.Book/AddBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServer).AddBook(ctx, req.(*BookAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Book_UpdateBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServer).UpdateBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/book.Book/UpdateBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServer).UpdateBook(ctx, req.(*BookUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Book_DelBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServer).DelBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/book.Book/DelBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServer).DelBook(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Book_DelSomeBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServer).DelSomeBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/book.Book/DelSomeBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServer).DelSomeBook(ctx, req.(*IdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Book_GetTypeById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServer).GetTypeById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/book.Book/GetTypeById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServer).GetTypeById(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Book_GetTypeByNameLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServer).GetTypeByNameLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/book.Book/GetTypeByNameLike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServer).GetTypeByNameLike(ctx, req.(*NameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Book_IsExistTypeById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServer).IsExistTypeById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/book.Book/IsExistTypeById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServer).IsExistTypeById(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Book_IsExistTypeByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServer).IsExistTypeByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/book.Book/IsExistTypeByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServer).IsExistTypeByName(ctx, req.(*NameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Book_GetTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TypesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServer).GetTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/book.Book/GetTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServer).GetTypes(ctx, req.(*TypesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Book_AddType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TypeAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServer).AddType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/book.Book/AddType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServer).AddType(ctx, req.(*TypeAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Book_UpdateType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TypeUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServer).UpdateType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/book.Book/UpdateType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServer).UpdateType(ctx, req.(*TypeUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Book_DelType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServer).DelType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/book.Book/DelType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServer).DelType(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Book_serviceDesc = grpc.ServiceDesc{
	ServiceName: "book.Book",
	HandlerType: (*BookServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getBookById",
			Handler:    _Book_GetBookById_Handler,
		},
		{
			MethodName: "getBookByNameLike",
			Handler:    _Book_GetBookByNameLike_Handler,
		},
		{
			MethodName: "IsExistBookById",
			Handler:    _Book_IsExistBookById_Handler,
		},
		{
			MethodName: "IsExistBookByName",
			Handler:    _Book_IsExistBookByName_Handler,
		},
		{
			MethodName: "getBooks",
			Handler:    _Book_GetBooks_Handler,
		},
		{
			MethodName: "AddBook",
			Handler:    _Book_AddBook_Handler,
		},
		{
			MethodName: "UpdateBook",
			Handler:    _Book_UpdateBook_Handler,
		},
		{
			MethodName: "DelBook",
			Handler:    _Book_DelBook_Handler,
		},
		{
			MethodName: "DelSomeBook",
			Handler:    _Book_DelSomeBook_Handler,
		},
		{
			MethodName: "getTypeById",
			Handler:    _Book_GetTypeById_Handler,
		},
		{
			MethodName: "getTypeByNameLike",
			Handler:    _Book_GetTypeByNameLike_Handler,
		},
		{
			MethodName: "IsExistTypeById",
			Handler:    _Book_IsExistTypeById_Handler,
		},
		{
			MethodName: "IsExistTypeByName",
			Handler:    _Book_IsExistTypeByName_Handler,
		},
		{
			MethodName: "getTypes",
			Handler:    _Book_GetTypes_Handler,
		},
		{
			MethodName: "AddType",
			Handler:    _Book_AddType_Handler,
		},
		{
			MethodName: "UpdateType",
			Handler:    _Book_UpdateType_Handler,
		},
		{
			MethodName: "DelType",
			Handler:    _Book_DelType_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "book.proto",
}
