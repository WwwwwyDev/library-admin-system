// Code generated by goctl. DO NOT EDIT!
// Source: vip.proto

package vipclient

import (
	"context"

	"go-zero-admin-server/service/vip/rpc/vip"

	"github.com/tal-tech/go-zero/zrpc"
)

type (
	CardNumberReq  = vip.CardNumberReq
	VipsReq        = vip.VipsReq
	VipsInfoReply  = vip.VipsInfoReply
	IsExistReply   = vip.IsExistReply
	EmptyReq       = vip.EmptyReq
	IdsReq         = vip.IdsReq
	VipUpdateReq   = vip.VipUpdateReq
	VipAddReq      = vip.VipAddReq
	VipInfoReply   = vip.VipInfoReply
	IsSuccessReply = vip.IsSuccessReply
	IdReq          = vip.IdReq

	Vip interface {
		GetVipById(ctx context.Context, in *IdReq) (*VipInfoReply, error)
		GetVipByCardNumberLike(ctx context.Context, in *CardNumberReq) (*VipsInfoReply, error)
		IsExistVipById(ctx context.Context, in *IdReq) (*IsExistReply, error)
		IsExistVipByCardNumber(ctx context.Context, in *CardNumberReq) (*IsExistReply, error)
		GetVips(ctx context.Context, in *VipsReq) (*VipsInfoReply, error)
		AddVip(ctx context.Context, in *VipAddReq) (*IsSuccessReply, error)
		UpdateVip(ctx context.Context, in *VipUpdateReq) (*IsSuccessReply, error)
		DelVip(ctx context.Context, in *IdReq) (*IsSuccessReply, error)
		DelSomeVip(ctx context.Context, in *IdsReq) (*IsSuccessReply, error)
	}

	defaultVip struct {
		cli zrpc.Client
	}
)

func NewVip(cli zrpc.Client) Vip {
	return &defaultVip{
		cli: cli,
	}
}

func (m *defaultVip) GetVipById(ctx context.Context, in *IdReq) (*VipInfoReply, error) {
	client := vip.NewVipClient(m.cli.Conn())
	return client.GetVipById(ctx, in)
}

func (m *defaultVip) GetVipByCardNumberLike(ctx context.Context, in *CardNumberReq) (*VipsInfoReply, error) {
	client := vip.NewVipClient(m.cli.Conn())
	return client.GetVipByCardNumberLike(ctx, in)
}

func (m *defaultVip) IsExistVipById(ctx context.Context, in *IdReq) (*IsExistReply, error) {
	client := vip.NewVipClient(m.cli.Conn())
	return client.IsExistVipById(ctx, in)
}

func (m *defaultVip) IsExistVipByCardNumber(ctx context.Context, in *CardNumberReq) (*IsExistReply, error) {
	client := vip.NewVipClient(m.cli.Conn())
	return client.IsExistVipByCardNumber(ctx, in)
}

func (m *defaultVip) GetVips(ctx context.Context, in *VipsReq) (*VipsInfoReply, error) {
	client := vip.NewVipClient(m.cli.Conn())
	return client.GetVips(ctx, in)
}

func (m *defaultVip) AddVip(ctx context.Context, in *VipAddReq) (*IsSuccessReply, error) {
	client := vip.NewVipClient(m.cli.Conn())
	return client.AddVip(ctx, in)
}

func (m *defaultVip) UpdateVip(ctx context.Context, in *VipUpdateReq) (*IsSuccessReply, error) {
	client := vip.NewVipClient(m.cli.Conn())
	return client.UpdateVip(ctx, in)
}

func (m *defaultVip) DelVip(ctx context.Context, in *IdReq) (*IsSuccessReply, error) {
	client := vip.NewVipClient(m.cli.Conn())
	return client.DelVip(ctx, in)
}

func (m *defaultVip) DelSomeVip(ctx context.Context, in *IdsReq) (*IsSuccessReply, error) {
	client := vip.NewVipClient(m.cli.Conn())
	return client.DelSomeVip(ctx, in)
}
