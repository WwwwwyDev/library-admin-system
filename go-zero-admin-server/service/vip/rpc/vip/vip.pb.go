// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: vip.proto

package vip

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EmptyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyReq) Reset() {
	*x = EmptyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vip_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyReq) ProtoMessage() {}

func (x *EmptyReq) ProtoReflect() protoreflect.Message {
	mi := &file_vip_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyReq.ProtoReflect.Descriptor instead.
func (*EmptyReq) Descriptor() ([]byte, []int) {
	return file_vip_proto_rawDescGZIP(), []int{0}
}

type IdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *IdReq) Reset() {
	*x = IdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vip_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdReq) ProtoMessage() {}

func (x *IdReq) ProtoReflect() protoreflect.Message {
	mi := &file_vip_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdReq.ProtoReflect.Descriptor instead.
func (*IdReq) Descriptor() ([]byte, []int) {
	return file_vip_proto_rawDescGZIP(), []int{1}
}

func (x *IdReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type IdsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []*IdReq `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *IdsReq) Reset() {
	*x = IdsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vip_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdsReq) ProtoMessage() {}

func (x *IdsReq) ProtoReflect() protoreflect.Message {
	mi := &file_vip_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdsReq.ProtoReflect.Descriptor instead.
func (*IdsReq) Descriptor() ([]byte, []int) {
	return file_vip_proto_rawDescGZIP(), []int{2}
}

func (x *IdsReq) GetIds() []*IdReq {
	if x != nil {
		return x.Ids
	}
	return nil
}

type CardNumberReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardNumber string `protobuf:"bytes,1,opt,name=cardNumber,proto3" json:"cardNumber,omitempty"`
}

func (x *CardNumberReq) Reset() {
	*x = CardNumberReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vip_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardNumberReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardNumberReq) ProtoMessage() {}

func (x *CardNumberReq) ProtoReflect() protoreflect.Message {
	mi := &file_vip_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardNumberReq.ProtoReflect.Descriptor instead.
func (*CardNumberReq) Descriptor() ([]byte, []int) {
	return file_vip_proto_rawDescGZIP(), []int{3}
}

func (x *CardNumberReq) GetCardNumber() string {
	if x != nil {
		return x.CardNumber
	}
	return ""
}

type VipsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page       int64  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Limit      int64  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Name       string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	CardNumber string `protobuf:"bytes,4,opt,name=cardNumber,proto3" json:"cardNumber,omitempty"`
}

func (x *VipsReq) Reset() {
	*x = VipsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vip_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipsReq) ProtoMessage() {}

func (x *VipsReq) ProtoReflect() protoreflect.Message {
	mi := &file_vip_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipsReq.ProtoReflect.Descriptor instead.
func (*VipsReq) Descriptor() ([]byte, []int) {
	return file_vip_proto_rawDescGZIP(), []int{4}
}

func (x *VipsReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *VipsReq) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *VipsReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VipsReq) GetCardNumber() string {
	if x != nil {
		return x.CardNumber
	}
	return ""
}

type VipUpdateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CardNumber string `protobuf:"bytes,2,opt,name=cardNumber,proto3" json:"cardNumber,omitempty"`
	Name       string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Info       string `protobuf:"bytes,4,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *VipUpdateReq) Reset() {
	*x = VipUpdateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vip_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipUpdateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipUpdateReq) ProtoMessage() {}

func (x *VipUpdateReq) ProtoReflect() protoreflect.Message {
	mi := &file_vip_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipUpdateReq.ProtoReflect.Descriptor instead.
func (*VipUpdateReq) Descriptor() ([]byte, []int) {
	return file_vip_proto_rawDescGZIP(), []int{5}
}

func (x *VipUpdateReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *VipUpdateReq) GetCardNumber() string {
	if x != nil {
		return x.CardNumber
	}
	return ""
}

func (x *VipUpdateReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VipUpdateReq) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

type VipAddReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardNumber string `protobuf:"bytes,1,opt,name=cardNumber,proto3" json:"cardNumber,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Info       string `protobuf:"bytes,3,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *VipAddReq) Reset() {
	*x = VipAddReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vip_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipAddReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipAddReq) ProtoMessage() {}

func (x *VipAddReq) ProtoReflect() protoreflect.Message {
	mi := &file_vip_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipAddReq.ProtoReflect.Descriptor instead.
func (*VipAddReq) Descriptor() ([]byte, []int) {
	return file_vip_proto_rawDescGZIP(), []int{6}
}

func (x *VipAddReq) GetCardNumber() string {
	if x != nil {
		return x.CardNumber
	}
	return ""
}

func (x *VipAddReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VipAddReq) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

type VipInfoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CardNumber string `protobuf:"bytes,2,opt,name=cardNumber,proto3" json:"cardNumber,omitempty"`
	Name       string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Info       string `protobuf:"bytes,4,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *VipInfoReply) Reset() {
	*x = VipInfoReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vip_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipInfoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipInfoReply) ProtoMessage() {}

func (x *VipInfoReply) ProtoReflect() protoreflect.Message {
	mi := &file_vip_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipInfoReply.ProtoReflect.Descriptor instead.
func (*VipInfoReply) Descriptor() ([]byte, []int) {
	return file_vip_proto_rawDescGZIP(), []int{7}
}

func (x *VipInfoReply) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *VipInfoReply) GetCardNumber() string {
	if x != nil {
		return x.CardNumber
	}
	return ""
}

func (x *VipInfoReply) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VipInfoReply) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

type VipsInfoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total    int64           `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	VipsInfo []*VipInfoReply `protobuf:"bytes,2,rep,name=vipsInfo,proto3" json:"vipsInfo,omitempty"`
}

func (x *VipsInfoReply) Reset() {
	*x = VipsInfoReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vip_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipsInfoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipsInfoReply) ProtoMessage() {}

func (x *VipsInfoReply) ProtoReflect() protoreflect.Message {
	mi := &file_vip_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipsInfoReply.ProtoReflect.Descriptor instead.
func (*VipsInfoReply) Descriptor() ([]byte, []int) {
	return file_vip_proto_rawDescGZIP(), []int{8}
}

func (x *VipsInfoReply) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *VipsInfoReply) GetVipsInfo() []*VipInfoReply {
	if x != nil {
		return x.VipsInfo
	}
	return nil
}

type IsExistReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsExist bool `protobuf:"varint,1,opt,name=isExist,proto3" json:"isExist,omitempty"`
}

func (x *IsExistReply) Reset() {
	*x = IsExistReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vip_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsExistReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsExistReply) ProtoMessage() {}

func (x *IsExistReply) ProtoReflect() protoreflect.Message {
	mi := &file_vip_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsExistReply.ProtoReflect.Descriptor instead.
func (*IsExistReply) Descriptor() ([]byte, []int) {
	return file_vip_proto_rawDescGZIP(), []int{9}
}

func (x *IsExistReply) GetIsExist() bool {
	if x != nil {
		return x.IsExist
	}
	return false
}

type IsSuccessReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsSuccess bool `protobuf:"varint,1,opt,name=isSuccess,proto3" json:"isSuccess,omitempty"`
}

func (x *IsSuccessReply) Reset() {
	*x = IsSuccessReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vip_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsSuccessReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsSuccessReply) ProtoMessage() {}

func (x *IsSuccessReply) ProtoReflect() protoreflect.Message {
	mi := &file_vip_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsSuccessReply.ProtoReflect.Descriptor instead.
func (*IsSuccessReply) Descriptor() ([]byte, []int) {
	return file_vip_proto_rawDescGZIP(), []int{10}
}

func (x *IsSuccessReply) GetIsSuccess() bool {
	if x != nil {
		return x.IsSuccess
	}
	return false
}

var File_vip_proto protoreflect.FileDescriptor

var file_vip_proto_rawDesc = []byte{
	0x0a, 0x09, 0x76, 0x69, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x76, 0x69, 0x70,
	0x22, 0x0a, 0x0a, 0x08, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x22, 0x17, 0x0a, 0x05,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x26, 0x0a, 0x06, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x12,
	0x1c, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x76,
	0x69, 0x70, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x2f, 0x0a,
	0x0d, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x67,
	0x0a, 0x07, 0x56, 0x69, 0x70, 0x73, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x72,
	0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x66, 0x0a, 0x0c, 0x56, 0x69, 0x70, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x72,
	0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22,
	0x53, 0x0a, 0x09, 0x56, 0x69, 0x70, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x69, 0x6e, 0x66, 0x6f, 0x22, 0x66, 0x0a, 0x0c, 0x56, 0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x54, 0x0a, 0x0d,
	0x56, 0x69, 0x70, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x2d, 0x0a, 0x08, 0x76, 0x69, 0x70, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x69, 0x70, 0x2e, 0x56, 0x69, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x08, 0x76, 0x69, 0x70, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x28, 0x0a, 0x0c, 0x69, 0x73, 0x45, 0x78, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x45, 0x78, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x45, 0x78, 0x69, 0x73, 0x74, 0x22, 0x2e, 0x0a, 0x0e,
	0x69, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1c,
	0x0a, 0x09, 0x69, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x69, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x32, 0xd2, 0x03, 0x0a,
	0x03, 0x56, 0x69, 0x70, 0x12, 0x2b, 0x0a, 0x0a, 0x67, 0x65, 0x74, 0x56, 0x69, 0x70, 0x42, 0x79,
	0x49, 0x64, 0x12, 0x0a, 0x2e, 0x76, 0x69, 0x70, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x11,
	0x2e, 0x76, 0x69, 0x70, 0x2e, 0x56, 0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x40, 0x0a, 0x16, 0x67, 0x65, 0x74, 0x56, 0x69, 0x70, 0x42, 0x79, 0x43, 0x61, 0x72,
	0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x6b, 0x65, 0x12, 0x12, 0x2e, 0x76, 0x69,
	0x70, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a,
	0x12, 0x2e, 0x76, 0x69, 0x70, 0x2e, 0x56, 0x69, 0x70, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x2f, 0x0a, 0x0e, 0x49, 0x73, 0x45, 0x78, 0x69, 0x73, 0x74, 0x56, 0x69,
	0x70, 0x42, 0x79, 0x49, 0x64, 0x12, 0x0a, 0x2e, 0x76, 0x69, 0x70, 0x2e, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x1a, 0x11, 0x2e, 0x76, 0x69, 0x70, 0x2e, 0x69, 0x73, 0x45, 0x78, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x3f, 0x0a, 0x16, 0x49, 0x73, 0x45, 0x78, 0x69, 0x73, 0x74, 0x56,
	0x69, 0x70, 0x42, 0x79, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12,
	0x2e, 0x76, 0x69, 0x70, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x1a, 0x11, 0x2e, 0x76, 0x69, 0x70, 0x2e, 0x69, 0x73, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2b, 0x0a, 0x07, 0x67, 0x65, 0x74, 0x56, 0x69, 0x70, 0x73,
	0x12, 0x0c, 0x2e, 0x76, 0x69, 0x70, 0x2e, 0x56, 0x69, 0x70, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x12,
	0x2e, 0x76, 0x69, 0x70, 0x2e, 0x56, 0x69, 0x70, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x2d, 0x0a, 0x06, 0x41, 0x64, 0x64, 0x56, 0x69, 0x70, 0x12, 0x0e, 0x2e, 0x76,
	0x69, 0x70, 0x2e, 0x56, 0x69, 0x70, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x76,
	0x69, 0x70, 0x2e, 0x69, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x33, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x69, 0x70, 0x12, 0x11,
	0x2e, 0x76, 0x69, 0x70, 0x2e, 0x56, 0x69, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x13, 0x2e, 0x76, 0x69, 0x70, 0x2e, 0x69, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x29, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x56, 0x69, 0x70,
	0x12, 0x0a, 0x2e, 0x76, 0x69, 0x70, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x76,
	0x69, 0x70, 0x2e, 0x69, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x2e, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x53, 0x6f, 0x6d, 0x65, 0x56, 0x69, 0x70, 0x12,
	0x0b, 0x2e, 0x76, 0x69, 0x70, 0x2e, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x76,
	0x69, 0x70, 0x2e, 0x69, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_vip_proto_rawDescOnce sync.Once
	file_vip_proto_rawDescData = file_vip_proto_rawDesc
)

func file_vip_proto_rawDescGZIP() []byte {
	file_vip_proto_rawDescOnce.Do(func() {
		file_vip_proto_rawDescData = protoimpl.X.CompressGZIP(file_vip_proto_rawDescData)
	})
	return file_vip_proto_rawDescData
}

var file_vip_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_vip_proto_goTypes = []interface{}{
	(*EmptyReq)(nil),       // 0: vip.EmptyReq
	(*IdReq)(nil),          // 1: vip.IdReq
	(*IdsReq)(nil),         // 2: vip.IdsReq
	(*CardNumberReq)(nil),  // 3: vip.CardNumberReq
	(*VipsReq)(nil),        // 4: vip.VipsReq
	(*VipUpdateReq)(nil),   // 5: vip.VipUpdateReq
	(*VipAddReq)(nil),      // 6: vip.VipAddReq
	(*VipInfoReply)(nil),   // 7: vip.VipInfoReply
	(*VipsInfoReply)(nil),  // 8: vip.VipsInfoReply
	(*IsExistReply)(nil),   // 9: vip.isExistReply
	(*IsSuccessReply)(nil), // 10: vip.isSuccessReply
}
var file_vip_proto_depIdxs = []int32{
	1,  // 0: vip.IdsReq.ids:type_name -> vip.IdReq
	7,  // 1: vip.VipsInfoReply.vipsInfo:type_name -> vip.VipInfoReply
	1,  // 2: vip.Vip.getVipById:input_type -> vip.IdReq
	3,  // 3: vip.Vip.getVipByCardNumberLike:input_type -> vip.CardNumberReq
	1,  // 4: vip.Vip.IsExistVipById:input_type -> vip.IdReq
	3,  // 5: vip.Vip.IsExistVipByCardNumber:input_type -> vip.CardNumberReq
	4,  // 6: vip.Vip.getVips:input_type -> vip.VipsReq
	6,  // 7: vip.Vip.AddVip:input_type -> vip.VipAddReq
	5,  // 8: vip.Vip.UpdateVip:input_type -> vip.VipUpdateReq
	1,  // 9: vip.Vip.DelVip:input_type -> vip.IdReq
	2,  // 10: vip.Vip.DelSomeVip:input_type -> vip.IdsReq
	7,  // 11: vip.Vip.getVipById:output_type -> vip.VipInfoReply
	8,  // 12: vip.Vip.getVipByCardNumberLike:output_type -> vip.VipsInfoReply
	9,  // 13: vip.Vip.IsExistVipById:output_type -> vip.isExistReply
	9,  // 14: vip.Vip.IsExistVipByCardNumber:output_type -> vip.isExistReply
	8,  // 15: vip.Vip.getVips:output_type -> vip.VipsInfoReply
	10, // 16: vip.Vip.AddVip:output_type -> vip.isSuccessReply
	10, // 17: vip.Vip.UpdateVip:output_type -> vip.isSuccessReply
	10, // 18: vip.Vip.DelVip:output_type -> vip.isSuccessReply
	10, // 19: vip.Vip.DelSomeVip:output_type -> vip.isSuccessReply
	11, // [11:20] is the sub-list for method output_type
	2,  // [2:11] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_vip_proto_init() }
func file_vip_proto_init() {
	if File_vip_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_vip_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vip_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vip_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vip_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardNumberReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vip_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vip_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipUpdateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vip_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipAddReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vip_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipInfoReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vip_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipsInfoReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vip_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsExistReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vip_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsSuccessReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_vip_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_vip_proto_goTypes,
		DependencyIndexes: file_vip_proto_depIdxs,
		MessageInfos:      file_vip_proto_msgTypes,
	}.Build()
	File_vip_proto = out.File
	file_vip_proto_rawDesc = nil
	file_vip_proto_goTypes = nil
	file_vip_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// VipClient is the client API for Vip service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VipClient interface {
	GetVipById(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*VipInfoReply, error)
	GetVipByCardNumberLike(ctx context.Context, in *CardNumberReq, opts ...grpc.CallOption) (*VipsInfoReply, error)
	IsExistVipById(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*IsExistReply, error)
	IsExistVipByCardNumber(ctx context.Context, in *CardNumberReq, opts ...grpc.CallOption) (*IsExistReply, error)
	GetVips(ctx context.Context, in *VipsReq, opts ...grpc.CallOption) (*VipsInfoReply, error)
	AddVip(ctx context.Context, in *VipAddReq, opts ...grpc.CallOption) (*IsSuccessReply, error)
	UpdateVip(ctx context.Context, in *VipUpdateReq, opts ...grpc.CallOption) (*IsSuccessReply, error)
	DelVip(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*IsSuccessReply, error)
	DelSomeVip(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*IsSuccessReply, error)
}

type vipClient struct {
	cc grpc.ClientConnInterface
}

func NewVipClient(cc grpc.ClientConnInterface) VipClient {
	return &vipClient{cc}
}

func (c *vipClient) GetVipById(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*VipInfoReply, error) {
	out := new(VipInfoReply)
	err := c.cc.Invoke(ctx, "/vip.Vip/getVipById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipClient) GetVipByCardNumberLike(ctx context.Context, in *CardNumberReq, opts ...grpc.CallOption) (*VipsInfoReply, error) {
	out := new(VipsInfoReply)
	err := c.cc.Invoke(ctx, "/vip.Vip/getVipByCardNumberLike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipClient) IsExistVipById(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*IsExistReply, error) {
	out := new(IsExistReply)
	err := c.cc.Invoke(ctx, "/vip.Vip/IsExistVipById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipClient) IsExistVipByCardNumber(ctx context.Context, in *CardNumberReq, opts ...grpc.CallOption) (*IsExistReply, error) {
	out := new(IsExistReply)
	err := c.cc.Invoke(ctx, "/vip.Vip/IsExistVipByCardNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipClient) GetVips(ctx context.Context, in *VipsReq, opts ...grpc.CallOption) (*VipsInfoReply, error) {
	out := new(VipsInfoReply)
	err := c.cc.Invoke(ctx, "/vip.Vip/getVips", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipClient) AddVip(ctx context.Context, in *VipAddReq, opts ...grpc.CallOption) (*IsSuccessReply, error) {
	out := new(IsSuccessReply)
	err := c.cc.Invoke(ctx, "/vip.Vip/AddVip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipClient) UpdateVip(ctx context.Context, in *VipUpdateReq, opts ...grpc.CallOption) (*IsSuccessReply, error) {
	out := new(IsSuccessReply)
	err := c.cc.Invoke(ctx, "/vip.Vip/UpdateVip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipClient) DelVip(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*IsSuccessReply, error) {
	out := new(IsSuccessReply)
	err := c.cc.Invoke(ctx, "/vip.Vip/DelVip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipClient) DelSomeVip(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*IsSuccessReply, error) {
	out := new(IsSuccessReply)
	err := c.cc.Invoke(ctx, "/vip.Vip/DelSomeVip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VipServer is the server API for Vip service.
type VipServer interface {
	GetVipById(context.Context, *IdReq) (*VipInfoReply, error)
	GetVipByCardNumberLike(context.Context, *CardNumberReq) (*VipsInfoReply, error)
	IsExistVipById(context.Context, *IdReq) (*IsExistReply, error)
	IsExistVipByCardNumber(context.Context, *CardNumberReq) (*IsExistReply, error)
	GetVips(context.Context, *VipsReq) (*VipsInfoReply, error)
	AddVip(context.Context, *VipAddReq) (*IsSuccessReply, error)
	UpdateVip(context.Context, *VipUpdateReq) (*IsSuccessReply, error)
	DelVip(context.Context, *IdReq) (*IsSuccessReply, error)
	DelSomeVip(context.Context, *IdsReq) (*IsSuccessReply, error)
}

// UnimplementedVipServer can be embedded to have forward compatible implementations.
type UnimplementedVipServer struct {
}

func (*UnimplementedVipServer) GetVipById(context.Context, *IdReq) (*VipInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVipById not implemented")
}
func (*UnimplementedVipServer) GetVipByCardNumberLike(context.Context, *CardNumberReq) (*VipsInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVipByCardNumberLike not implemented")
}
func (*UnimplementedVipServer) IsExistVipById(context.Context, *IdReq) (*IsExistReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsExistVipById not implemented")
}
func (*UnimplementedVipServer) IsExistVipByCardNumber(context.Context, *CardNumberReq) (*IsExistReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsExistVipByCardNumber not implemented")
}
func (*UnimplementedVipServer) GetVips(context.Context, *VipsReq) (*VipsInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVips not implemented")
}
func (*UnimplementedVipServer) AddVip(context.Context, *VipAddReq) (*IsSuccessReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddVip not implemented")
}
func (*UnimplementedVipServer) UpdateVip(context.Context, *VipUpdateReq) (*IsSuccessReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVip not implemented")
}
func (*UnimplementedVipServer) DelVip(context.Context, *IdReq) (*IsSuccessReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelVip not implemented")
}
func (*UnimplementedVipServer) DelSomeVip(context.Context, *IdsReq) (*IsSuccessReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelSomeVip not implemented")
}

func RegisterVipServer(s *grpc.Server, srv VipServer) {
	s.RegisterService(&_Vip_serviceDesc, srv)
}

func _Vip_GetVipById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipServer).GetVipById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vip.Vip/GetVipById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipServer).GetVipById(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vip_GetVipByCardNumberLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardNumberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipServer).GetVipByCardNumberLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vip.Vip/GetVipByCardNumberLike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipServer).GetVipByCardNumberLike(ctx, req.(*CardNumberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vip_IsExistVipById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipServer).IsExistVipById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vip.Vip/IsExistVipById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipServer).IsExistVipById(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vip_IsExistVipByCardNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardNumberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipServer).IsExistVipByCardNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vip.Vip/IsExistVipByCardNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipServer).IsExistVipByCardNumber(ctx, req.(*CardNumberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vip_GetVips_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VipsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipServer).GetVips(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vip.Vip/GetVips",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipServer).GetVips(ctx, req.(*VipsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vip_AddVip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VipAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipServer).AddVip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vip.Vip/AddVip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipServer).AddVip(ctx, req.(*VipAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vip_UpdateVip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VipUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipServer).UpdateVip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vip.Vip/UpdateVip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipServer).UpdateVip(ctx, req.(*VipUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vip_DelVip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipServer).DelVip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vip.Vip/DelVip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipServer).DelVip(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vip_DelSomeVip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipServer).DelSomeVip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vip.Vip/DelSomeVip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipServer).DelSomeVip(ctx, req.(*IdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Vip_serviceDesc = grpc.ServiceDesc{
	ServiceName: "vip.Vip",
	HandlerType: (*VipServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getVipById",
			Handler:    _Vip_GetVipById_Handler,
		},
		{
			MethodName: "getVipByCardNumberLike",
			Handler:    _Vip_GetVipByCardNumberLike_Handler,
		},
		{
			MethodName: "IsExistVipById",
			Handler:    _Vip_IsExistVipById_Handler,
		},
		{
			MethodName: "IsExistVipByCardNumber",
			Handler:    _Vip_IsExistVipByCardNumber_Handler,
		},
		{
			MethodName: "getVips",
			Handler:    _Vip_GetVips_Handler,
		},
		{
			MethodName: "AddVip",
			Handler:    _Vip_AddVip_Handler,
		},
		{
			MethodName: "UpdateVip",
			Handler:    _Vip_UpdateVip_Handler,
		},
		{
			MethodName: "DelVip",
			Handler:    _Vip_DelVip_Handler,
		},
		{
			MethodName: "DelSomeVip",
			Handler:    _Vip_DelSomeVip_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vip.proto",
}
