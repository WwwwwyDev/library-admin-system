// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	book "go-zero-admin-server/api/internal/handler/book"
	externalserver "go-zero-admin-server/api/internal/handler/externalserver"
	jwt "go-zero-admin-server/api/internal/handler/jwt"
	search "go-zero-admin-server/api/internal/handler/search"
	user "go-zero-admin-server/api/internal/handler/user"
	verify "go-zero-admin-server/api/internal/handler/verify"
	"go-zero-admin-server/api/internal/svc"

	"github.com/tal-tech/go-zero/rest"
)

func RegisterHandlers(engine *rest.Server, serverCtx *svc.ServiceContext) {
	engine.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/admin/api/rjwt",
				Handler: jwt.RefreshJwtHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/admin/api/djwt",
				Handler: jwt.DecodeJwtHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/admin/api/verify/loginOut",
				Handler: jwt.LoginOutHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/admin/api/verify/changePassword",
				Handler: jwt.ChangePasswordHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/admin/api/verify/editUser",
				Handler: jwt.EditUserHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	engine.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/admin/api/search/userId/:id",
				Handler: search.GetUserByIdHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/admin/api/search/username/:username",
				Handler: search.GetUserByUserNameLikeHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/admin/api/search/book/:name",
				Handler: search.GetBookByNameLikeHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/admin/api/search/book/type/:name",
				Handler: search.GetTypeByNameLikeHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/admin/api/search/roles",
				Handler: search.GetAllRolesHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/admin/api/search/loginStatus",
				Handler: search.GetLoginStatusHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/admin/api/search/book/type",
				Handler: search.GetAllBookTypesHandler(serverCtx),
			},
		},
	)

	engine.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/admin/api/qiniuToken",
				Handler: externalserver.GetQiniuTokenHandler(serverCtx),
			},
		},
	)

	engine.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/admin/api/verify/login",
				Handler: verify.LoginHandler(serverCtx),
			},
		},
	)

	engine.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/admin/api/user",
				Handler: user.GetUsersHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/admin/api/user",
				Handler: user.AddUserHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/admin/api/user/:id",
				Handler: user.UpdateUserHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/admin/api/userRoles/:id",
				Handler: user.EditUserRolesHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/admin/api/user/:id",
				Handler: user.DeleteUserHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	engine.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/admin/api/book",
				Handler: book.GetBooksHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/admin/api/book",
				Handler: book.AddBookHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/admin/api/book/:id",
				Handler: book.UpdateBookHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/admin/api/book/:id",
				Handler: book.DeleteBookHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/admin/api/book/type",
				Handler: book.GetTypesHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/admin/api/book/type",
				Handler: book.AddTypeHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/admin/api/book/type/:id",
				Handler: book.UpdateTypeHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/admin/api/book/type/:id",
				Handler: book.DeleteTypeHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)
}
